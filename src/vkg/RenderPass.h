/*
 * Copyright (C) 2020 Jordan Hendl
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/* 
 * File:   RenderPass.h
 * Author: Jordan Hendl
 *
 * Created on December 28, 2020, 10:34 AM
 */

#pragma once

namespace vk
{
  class Framebuffer ;
  class RenderPass  ;
  union ClearValue  ;
  class Rect2D      ;
}

namespace nyx
{
  class Attachment ;
  
  /** Forward declared image layout.
   */
  enum class ImageLayout : unsigned ;
  enum class ImageFormat : unsigned ;
  namespace vkg
  {
    class CommandBuffer ;
    class PipelineData ;
    class Image ;
    
    class RenderPass
    {
      public:
        /** Default constructor.
         */
        RenderPass() ;
        
        /** Default deconstructor.
         */
        ~RenderPass() ;
  
        /** Method to initialize this object.
         * @param device The device to use for all GPU operations.
         * @param nyx_file_path The path to the .nyx file on the filesystem to use.
         * @param context The Framework context for this renderer to draw to.
         */
        void initialize( unsigned device ) ;
        
        /** Method to initialize this object.
         * @param device The device to use for all GPU operations.
         * @param nyx_file_bytes The bytes of the .nyx file to use for this object.
         * @param size The size of the bytes array.
         * @param context The Framework context for this renderer to draw to.
         */
        void initialize( unsigned device, unsigned window_id ) ;
        
        /** Method to check whether this object is initialized or not.
         * @return Whether or not this object is initialized.
         */
        bool initialized() const ;

        /** Method to set the dimensions of this render pass's output attachments.
         * @param width The width in pixels of this object's output images.
         * @param height The height in pixels of this object's output images.
         */
        void setDimensions( unsigned width, unsigned height ) ;
  
        /** Method to retrieve the number of framebuffers generated by this renderer.
         * @return The number of framebuffers generated by this renderer.
         */
        unsigned count() const ;
        

        /** Method to retrieve the device used by this renderer.
         * @return Const reference to the device used for this renderer.
         */
        unsigned device() const ;
        
        /** Method to retrieve the current index of framebuffer this renderpass is set to draw to.
         * @return The index of this render pass's current framebuffer.
         */
        unsigned currentIndex() const ;
        
        /** Method to present this render pass to the screen, if initialized with a window.
         * @return Whether or not this render pass had to reallocate data based on window events.
         */
        bool present() ;
        
        /** Method to retrieve a framebuffer from this object.
         * @param index The index of framebuffer to retrieve. See @count for the amount.
         * @return Const reference to this object's internal framebuffer.
         */
        const vkg::Image& framebuffer( unsigned index ) const ;
        
        /** Method to reset this object and deallocate all allocated data.
         */
        void reset() ;
        
        /** Method to add a subpass to this render pass.
         * @param attachments The attachments of the subpass.
         * @param attachment_count The number of attachments.
         * @param subpass_deps The array of subpasses the input depends on.
         * @param num_subpass_deps The amount of entries in the dependancy array.
         * @param depth_enable Whether or not to perform depth testing for this subpass.
         * @param depth_clear The value to use for clearing depth.
         */
        void addSubpass( const nyx::Attachment* attachments, unsigned attachment_count,
                         const unsigned* subpass_deps, unsigned num_subpass_deps, 
                         bool depth_enable, float depth_clear ) ;

      private:

        friend class vkg::CommandBuffer ;
        friend class vkg::PipelineData  ;

        /** Helper method to retrieve the current framebuffer in use.
         * @return The current vulkan framebuffer being used by this object.
         */
        vk::Framebuffer current() const ;
        
        /** Helper method to retrieve the current area of this render pass. 
         * @return The current area of this render pass.
         */
        const vk::Rect2D& area() const ;
        
        /** Helper method to retrieve the array of framebuffers from this render pass.
         * @return The pointer to the start of this object's framebuffer array.
         */
        const vk::Framebuffer*  framebuffers() const ;
        
        /** Method to retrieve the array of clear values from this object.
         * @return The pointer to the start of this object's clear value array.
         */
        const vk::ClearValue*   clearValues() const ;
        
        /** Method to retrieve a const reference to this object's underlying vulkan handle.
         * @return Const reference to this object's underlying vulkan handle.
         */
        const vk::RenderPass& pass() const ;
        
        struct RenderPassData *render_pass_data ;
        
        RenderPassData& data() ;
        
        const RenderPassData& data() const ;
    };
  }
}

